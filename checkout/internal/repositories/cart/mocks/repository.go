// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "route256/checkout/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, user, sku, count
func (_m *Repository) Add(ctx context.Context, user int64, sku uint32, count uint32) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32, uint32) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Repository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - user int64
//  - sku uint32
//  - count uint32
func (_e *Repository_Expecter) Add(ctx interface{}, user interface{}, sku interface{}, count interface{}) *Repository_Add_Call {
	return &Repository_Add_Call{Call: _e.mock.On("Add", ctx, user, sku, count)}
}

func (_c *Repository_Add_Call) Run(run func(ctx context.Context, user int64, sku uint32, count uint32)) *Repository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(uint32), args[3].(uint32))
	})
	return _c
}

func (_c *Repository_Add_Call) Return(_a0 error) *Repository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: ctx, user, sku, count
func (_m *Repository) Delete(ctx context.Context, user int64, sku uint32, count uint32) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32, uint32) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - user int64
//  - sku uint32
//  - count uint32
func (_e *Repository_Expecter) Delete(ctx interface{}, user interface{}, sku interface{}, count interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, user, sku, count)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, user int64, sku uint32, count uint32)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(uint32), args[3].(uint32))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// List provides a mock function with given fields: ctx, user
func (_m *Repository) List(ctx context.Context, user int64) ([]model.CartItemDB, error) {
	ret := _m.Called(ctx, user)

	var r0 []model.CartItemDB
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.CartItemDB); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CartItemDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - user int64
func (_e *Repository_Expecter) List(ctx interface{}, user interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", ctx, user)}
}

func (_c *Repository_List_Call) Run(run func(ctx context.Context, user int64)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_List_Call) Return(_a0 []model.CartItemDB, _a1 error) *Repository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveByUser provides a mock function with given fields: ctx, user
func (_m *Repository) RemoveByUser(ctx context.Context, user int64) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveByUser'
type Repository_RemoveByUser_Call struct {
	*mock.Call
}

// RemoveByUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user int64
func (_e *Repository_Expecter) RemoveByUser(ctx interface{}, user interface{}) *Repository_RemoveByUser_Call {
	return &Repository_RemoveByUser_Call{Call: _e.mock.On("RemoveByUser", ctx, user)}
}

func (_c *Repository_RemoveByUser_Call) Run(run func(ctx context.Context, user int64)) *Repository_RemoveByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_RemoveByUser_Call) Return(_a0 error) *Repository_RemoveByUser_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
