// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "route256/checkout/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// SkuResolver is an autogenerated mock type for the SkuResolver type
type SkuResolver struct {
	mock.Mock
}

type SkuResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *SkuResolver) EXPECT() *SkuResolver_Expecter {
	return &SkuResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: ctx, sku
func (_m *SkuResolver) Resolve(ctx context.Context, sku uint32) (*model.Product, error) {
	ret := _m.Called(ctx, sku)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *model.Product); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SkuResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type SkuResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//  - ctx context.Context
//  - sku uint32
func (_e *SkuResolver_Expecter) Resolve(ctx interface{}, sku interface{}) *SkuResolver_Resolve_Call {
	return &SkuResolver_Resolve_Call{Call: _e.mock.On("Resolve", ctx, sku)}
}

func (_c *SkuResolver_Resolve_Call) Run(run func(ctx context.Context, sku uint32)) *SkuResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *SkuResolver_Resolve_Call) Return(_a0 *model.Product, _a1 error) *SkuResolver_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewSkuResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewSkuResolver creates a new instance of SkuResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSkuResolver(t mockConstructorTestingTNewSkuResolver) *SkuResolver {
	mock := &SkuResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
