// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "route256/loms/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddToOrder provides a mock function with given fields: ctx, items, _a2
func (_m *Repository) AddToOrder(ctx context.Context, items []model.OrderItemDB, _a2 int64) error {
	ret := _m.Called(ctx, items, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.OrderItemDB, int64) error); ok {
		r0 = rf(ctx, items, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddToOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToOrder'
type Repository_AddToOrder_Call struct {
	*mock.Call
}

// AddToOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - items []model.OrderItemDB
//  - _a2 int64
func (_e *Repository_Expecter) AddToOrder(ctx interface{}, items interface{}, _a2 interface{}) *Repository_AddToOrder_Call {
	return &Repository_AddToOrder_Call{Call: _e.mock.On("AddToOrder", ctx, items, _a2)}
}

func (_c *Repository_AddToOrder_Call) Run(run func(ctx context.Context, items []model.OrderItemDB, _a2 int64)) *Repository_AddToOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.OrderItemDB), args[2].(int64))
	})
	return _c
}

func (_c *Repository_AddToOrder_Call) Return(_a0 error) *Repository_AddToOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, user
func (_m *Repository) CreateOrder(ctx context.Context, user int64) (int64, error) {
	ret := _m.Called(ctx, user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type Repository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - user int64
func (_e *Repository_Expecter) CreateOrder(ctx interface{}, user interface{}) *Repository_CreateOrder_Call {
	return &Repository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, user)}
}

func (_c *Repository_CreateOrder_Call) Run(run func(ctx context.Context, user int64)) *Repository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_CreateOrder_Call) Return(_a0 int64, _a1 error) *Repository_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetExpiredPaymentOrders provides a mock function with given fields: ctx
func (_m *Repository) GetExpiredPaymentOrders(ctx context.Context) ([]int64, error) {
	ret := _m.Called(ctx)

	var r0 []int64
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetExpiredPaymentOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiredPaymentOrders'
type Repository_GetExpiredPaymentOrders_Call struct {
	*mock.Call
}

// GetExpiredPaymentOrders is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Repository_Expecter) GetExpiredPaymentOrders(ctx interface{}) *Repository_GetExpiredPaymentOrders_Call {
	return &Repository_GetExpiredPaymentOrders_Call{Call: _e.mock.On("GetExpiredPaymentOrders", ctx)}
}

func (_c *Repository_GetExpiredPaymentOrders_Call) Run(run func(ctx context.Context)) *Repository_GetExpiredPaymentOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetExpiredPaymentOrders_Call) Return(_a0 []int64, _a1 error) *Repository_GetExpiredPaymentOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrderInfo provides a mock function with given fields: ctx, _a1
func (_m *Repository) GetOrderInfo(ctx context.Context, _a1 int64) (model.OrderInfo, error) {
	ret := _m.Called(ctx, _a1)

	var r0 model.OrderInfo
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.OrderInfo); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.OrderInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetOrderInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderInfo'
type Repository_GetOrderInfo_Call struct {
	*mock.Call
}

// GetOrderInfo is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 int64
func (_e *Repository_Expecter) GetOrderInfo(ctx interface{}, _a1 interface{}) *Repository_GetOrderInfo_Call {
	return &Repository_GetOrderInfo_Call{Call: _e.mock.On("GetOrderInfo", ctx, _a1)}
}

func (_c *Repository_GetOrderInfo_Call) Run(run func(ctx context.Context, _a1 int64)) *Repository_GetOrderInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetOrderInfo_Call) Return(_a0 model.OrderInfo, _a1 error) *Repository_GetOrderInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrderItems provides a mock function with given fields: ctx, _a1
func (_m *Repository) GetOrderItems(ctx context.Context, _a1 int64) ([]model.OrderItemDB, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []model.OrderItemDB
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.OrderItemDB); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderItemDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetOrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderItems'
type Repository_GetOrderItems_Call struct {
	*mock.Call
}

// GetOrderItems is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 int64
func (_e *Repository_Expecter) GetOrderItems(ctx interface{}, _a1 interface{}) *Repository_GetOrderItems_Call {
	return &Repository_GetOrderItems_Call{Call: _e.mock.On("GetOrderItems", ctx, _a1)}
}

func (_c *Repository_GetOrderItems_Call) Run(run func(ctx context.Context, _a1 int64)) *Repository_GetOrderItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetOrderItems_Call) Return(_a0 []model.OrderItemDB, _a1 error) *Repository_GetOrderItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetOrderStatuses provides a mock function with given fields: ctx, _a1, status
func (_m *Repository) SetOrderStatuses(ctx context.Context, _a1 []int64, status model.OrderStatus) error {
	ret := _m.Called(ctx, _a1, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, model.OrderStatus) error); ok {
		r0 = rf(ctx, _a1, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SetOrderStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOrderStatuses'
type Repository_SetOrderStatuses_Call struct {
	*mock.Call
}

// SetOrderStatuses is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 []int64
//  - status model.OrderStatus
func (_e *Repository_Expecter) SetOrderStatuses(ctx interface{}, _a1 interface{}, status interface{}) *Repository_SetOrderStatuses_Call {
	return &Repository_SetOrderStatuses_Call{Call: _e.mock.On("SetOrderStatuses", ctx, _a1, status)}
}

func (_c *Repository_SetOrderStatuses_Call) Run(run func(ctx context.Context, _a1 []int64, status model.OrderStatus)) *Repository_SetOrderStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].(model.OrderStatus))
	})
	return _c
}

func (_c *Repository_SetOrderStatuses_Call) Return(_a0 error) *Repository_SetOrderStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
