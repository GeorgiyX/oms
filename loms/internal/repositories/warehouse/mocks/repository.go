// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "route256/loms/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CancelReserves provides a mock function with given fields: ctx, order
func (_m *Repository) CancelReserves(ctx context.Context, order []int64) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CancelReserves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelReserves'
type Repository_CancelReserves_Call struct {
	*mock.Call
}

// CancelReserves is a helper method to define mock.On call
//  - ctx context.Context
//  - order []int64
func (_e *Repository_Expecter) CancelReserves(ctx interface{}, order interface{}) *Repository_CancelReserves_Call {
	return &Repository_CancelReserves_Call{Call: _e.mock.On("CancelReserves", ctx, order)}
}

func (_c *Repository_CancelReserves_Call) Run(run func(ctx context.Context, order []int64)) *Repository_CancelReserves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *Repository_CancelReserves_Call) Return(_a0 error) *Repository_CancelReserves_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsEnough provides a mock function with given fields: ctx, sku, count
func (_m *Repository) IsEnough(ctx context.Context, sku uint32, count uint32) (bool, error) {
	ret := _m.Called(ctx, sku, count)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) bool); ok {
		r0 = rf(ctx, sku, count)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, sku, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_IsEnough_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnough'
type Repository_IsEnough_Call struct {
	*mock.Call
}

// IsEnough is a helper method to define mock.On call
//  - ctx context.Context
//  - sku uint32
//  - count uint32
func (_e *Repository_Expecter) IsEnough(ctx interface{}, sku interface{}, count interface{}) *Repository_IsEnough_Call {
	return &Repository_IsEnough_Call{Call: _e.mock.On("IsEnough", ctx, sku, count)}
}

func (_c *Repository_IsEnough_Call) Run(run func(ctx context.Context, sku uint32, count uint32)) *Repository_IsEnough_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *Repository_IsEnough_Call) Return(_a0 bool, _a1 error) *Repository_IsEnough_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReserveNext provides a mock function with given fields: ctx, sku, count, order
func (_m *Repository) ReserveNext(ctx context.Context, sku uint32, count uint32, order int64) (uint32, error) {
	ret := _m.Called(ctx, sku, count, order)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, int64) uint32); ok {
		r0 = rf(ctx, sku, count, order)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, int64) error); ok {
		r1 = rf(ctx, sku, count, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ReserveNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveNext'
type Repository_ReserveNext_Call struct {
	*mock.Call
}

// ReserveNext is a helper method to define mock.On call
//  - ctx context.Context
//  - sku uint32
//  - count uint32
//  - order int64
func (_e *Repository_Expecter) ReserveNext(ctx interface{}, sku interface{}, count interface{}, order interface{}) *Repository_ReserveNext_Call {
	return &Repository_ReserveNext_Call{Call: _e.mock.On("ReserveNext", ctx, sku, count, order)}
}

func (_c *Repository_ReserveNext_Call) Run(run func(ctx context.Context, sku uint32, count uint32, order int64)) *Repository_ReserveNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32), args[3].(int64))
	})
	return _c
}

func (_c *Repository_ReserveNext_Call) Return(_a0 uint32, _a1 error) *Repository_ReserveNext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SkuStock provides a mock function with given fields: ctx, sku
func (_m *Repository) SkuStock(ctx context.Context, sku uint32) ([]model.Warehouse, error) {
	ret := _m.Called(ctx, sku)

	var r0 []model.Warehouse
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []model.Warehouse); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Warehouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_SkuStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SkuStock'
type Repository_SkuStock_Call struct {
	*mock.Call
}

// SkuStock is a helper method to define mock.On call
//  - ctx context.Context
//  - sku uint32
func (_e *Repository_Expecter) SkuStock(ctx interface{}, sku interface{}) *Repository_SkuStock_Call {
	return &Repository_SkuStock_Call{Call: _e.mock.On("SkuStock", ctx, sku)}
}

func (_c *Repository_SkuStock_Call) Run(run func(ctx context.Context, sku uint32)) *Repository_SkuStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *Repository_SkuStock_Call) Return(_a0 []model.Warehouse, _a1 error) *Repository_SkuStock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
